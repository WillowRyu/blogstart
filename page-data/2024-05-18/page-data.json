{"componentChunkName":"component---src-templates-blog-post-js","path":"/2024-05-18/","result":{"data":{"site":{"siteMetadata":{"title":"FE Factory"}},"markdownRemark":{"id":"2e8a8ae9-e55e-5330-87b3-5e1a60ecf866","excerpt":"JS 는 간단한 장남감? 같은 언어로 시작하여 이렇게 큰 생태계를 가진 정말 대단한? 언어이다. 1997년 부터 약 2007년 까지 ES…","html":"<p>JS 는 간단한 장남감? 같은 언어로 시작하여 이렇게 큰 생태계를 가진<br>\n정말 대단한? 언어이다.</p>\n<p>1997년 부터 약 2007년 까지 ES4 까지의 진화를 거치며 그때 당시 주류에 있던<br>\n<code class=\"language-text\">flash</code>, <code class=\"language-text\">actionScript</code> 와 경쟁하며 승리해 왔다.</p>\n<p><code class=\"language-text\">ES5</code> 와 <code class=\"language-text\">NPM</code>, <code class=\"language-text\">NODE</code> 가 활용되면서 급속도로 확장되던 생태계에<br>\n<code class=\"language-text\">Angular</code>, <code class=\"language-text\">React</code>, <code class=\"language-text\">Vue</code> 와 같은 UI 도구의 등장,<br>\n그리고 2019 년에는 <code class=\"language-text\">Svelt</code> 와 같은 컴파일러 우선 프레임워크가 등장했다.</p>\n<p><code class=\"language-text\">Typescript</code> 는 Javascript 를 완전히 잡아먹어 더욱 강하게 만들었으며,<br>\n이제는 Mobile 과 Desktop 까지 확장되었고, JS 가 침투하지 않은 구간을<br>\n찾기 힘든 판국이다.</p>\n<p>활용도가 높고 여기저기 많이 쓰이고 있다는 알겠는데,<br>\n현재 생태계에서 쓰이는 JS 도구들을 잘 뜯어보면 특이점을 찾아 볼 수 있다.</p>\n<p>JS 의 도구들은 점진적으로 채택되고 변화해왔다.<br>\n변화 한다는 건 개발자들의 DX에 더 좋은 경험을 준다던가, 최적화가 더 잘되었다던가<br>\n메모리 사용량의 변화, 또는 속도와 관련된 업데이트 등이 있다.</p>\n<p>현재 JS 도구 중 널리 쓰이는 중요한 도구들을 살펴보자.</p>\n<blockquote>\n<p>webpack -> <code class=\"language-text\">Vite</code>, <code class=\"language-text\">Rspack</code><br>\nbabel -> <code class=\"language-text\">SWC</code><br>\nJest -> <code class=\"language-text\">vitest</code><br>\neslint -> <code class=\"language-text\">rslint</code>, <code class=\"language-text\">oxlint</code><br>\nnode -> <code class=\"language-text\">deno</code>, <code class=\"language-text\">bun</code><br>\nprettier -> <code class=\"language-text\">dprint</code></p>\n</blockquote>\n<p>그외 monorepo 를 위한 <code class=\"language-text\">turborepo</code>, <code class=\"language-text\">nx</code> 등이 있고<br>\n<code class=\"language-text\">biome</code> 같은 formatter 도 있다.</p>\n<p>아마 아직 주류로 쓰이는 도구가 아닌 것도 있겠지만<br>\n어쨋든 도구들은 점진적으로 더나은 방향으로 이동하고 있다.</p>\n<p>그럼 이제 해당 도구들의 변화를 봤을때 특이점이 보이는가?</p>\n<p>그들은 JS로 만들지 않은 JS 도구 들이다.<br>\n대다수 <code class=\"language-text\">Rust</code>로 개발되었으며, 그외 <code class=\"language-text\">Go</code>, <code class=\"language-text\">Zig</code> 가 포함되어 있다.</p>\n<p>JS 의 핵심도구들은 점점 JS 에서 떠나고 있다.<br>\n<code class=\"language-text\">ES4</code> 까지가 1세대, <code class=\"language-text\">ES5 ~ 6</code> 나오며 2세대가 되었다.<br>\n이때 지금도 주류로 쓰이는 대다수 도구들이 나오게되며 JS의 가장 큰 부흥을 가져왔다.<br>\n그리고 JS가 아닌 JS 도구들을 활용하는 새로운 3세대가 왔다.</p>\n<p>JS가 아닌 JS 도구들.<br>\n이렇게 된 가장 큰 이유는 결국 성능으로 귀결된다.<br>\n더작은 번들 사이즈, 더 빠른 속도, 더 빠른 빌드를 위해 결국 핵심 도구들은<br>\n결국 JS 를 버릴수 밖에 없었다.</p>\n<p>그럼 JS 외 언어를 배워야 하나?<br>\n배워두면 좋다. 배워서 나쁠건 없다.</p>\n<p>다만 <code class=\"language-text\">성능</code> 보다 <code class=\"language-text\">접근성</code>이 중요하다면 여전히 JS 또는 TS 로 개발은 계속 될 것이다.아마.<br>\n접근성이 중요한 부분은 아마 UI 프레임워크를 이용한 개발이 되지 않을까?</p>\n<p>핵심도구들의 발전에 기여하고 싶다면 위 언급한 <code class=\"language-text\">Rust</code> 같은 언어를 배워두면 좋지만<br>\n<code class=\"language-text\">Rust</code> 는 러닝커브가 꽤 높은 편이다.</p>\n<p>JS를 주로 활용한 UI 도구의 발전도 만만치 않고 그들을 익히고 응용하는데도 시간을<br>\n많이 쏟아야 할 것 이다.<br>\n왜냐면 우리의 일자리와 가장 많이 직결된 부분이기 때문이다.<br>\n대부분의 사람들에게 직장은 중요하니깐 나역시도 🥲</p>\n<p>추가로 생각보다 주춤한 <code class=\"language-text\">WASM</code> 역시 큰 잠재력을 가지고 JS의 자리를 위협하고 있다.<br>\n그리고 Flutter 를 내세운 <code class=\"language-text\">Dart</code> 도 존재하고.</p>\n<p>이런 생태계를 살펴보면 fe 에 입문한 사람들 또는 이제 어느정도 익숙해진 사람들은<br>\n어떤걸 공부해야 하고 어떻게 가야 할지 혼란스러울 수 있다.</p>\n<p>워낙 많은 양의 내용과 기술들이 쏟아져 나오고, 추가로 이제는 <code class=\"language-text\">A.I</code>로 인한 로봇과의<br>\n협력도 생각해야 한다.</p>\n<p>이제는 예전처럼 한개라도 잘하자는 마음가짐으로는 이런 생태계에서<br>\n살아남기 힘들수도? 있다.</p>\n<p>모든 걸 공부할 필요는 없지만 알고는 있어야 한다.<br>\n존재한다는 걸 알아야 선택지가 많아지고 응용할 수 있는 길이 많아질테니</p>\n<p>그래서 최신 기술의 트렌드나 변화와 관련된 뉴스레터 또는 유튜브를<br>\n구독하고 살펴보기를 권장한다.</p>\n<p>살펴봐야 할 부분이 늘어난 부분도 있지만 기술의 발전으로 인해 장점도 굉장히 많다.<br>\n메타프레임워크 의 활성화와 <code class=\"language-text\">Vercel</code>, <code class=\"language-text\">Netlify</code> 와 같은<br>\nCI/CD, CDN 의 통합서비스 제공업체들,<br>\n그리고 클라우드 플랫폼의 발전 등으로 인해 이전에 비해 개발하기 너무 편해진건 또 장점이다.</p>\n<p>엔지니어적인 발상보다 현실세상에서 발휘할수 있는 창의적인 아이디어가 있다면<br>\n이를 세상에 표현할 수 있는 방법도 쉬워졌다는 것이다.<br>\n그뒤에도 당연히 많은 노력이 필요하지만 그래도 짐이 점점 덜어지니 이또한 좋다.</p>\n<p>적다보니 글의 흐름이 마음대로 갔는데 내 블로그는 원래그렇다.<br>\n여튼 잘 살아남자.</p>","frontmatter":{"title":"The New Generation of JavaScript","date":"May 18, 2024","description":"살아남아야 한다"}}},"pageContext":{"slug":"/2024-05-18/","previous":{"fields":{"slug":"/2024-05-13/"},"frontmatter":{"title":"JS Quiz"}},"next":{"fields":{"slug":"/2024-06-04/"},"frontmatter":{"title":"기본 컴포넌트 설계 패턴"}}}},"staticQueryHashes":["2841359383","3490846071"]}